// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.1
// source: submodule-for-timecapsule/timeline_service/milestone.proto

package timeline

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	MilestoneService_GetMilestoneById_FullMethodName = "/timeline.MilestoneService/GetMilestoneById"
	MilestoneService_DeleteMilestone_FullMethodName  = "/timeline.MilestoneService/DeleteMilestone"
	MilestoneService_GetAllMilestones_FullMethodName = "/timeline.MilestoneService/GetAllMilestones"
)

// MilestoneServiceClient is the client API for MilestoneService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MilestoneServiceClient interface {
	GetMilestoneById(ctx context.Context, in *GetMilestoneByIdRequest, opts ...grpc.CallOption) (*Milestone, error)
	DeleteMilestone(ctx context.Context, in *DeleteMilestoneRequest, opts ...grpc.CallOption) (*DeleteMilestoneResponse, error)
	GetAllMilestones(ctx context.Context, in *GetAllMilestonesRequest, opts ...grpc.CallOption) (*GetAllMilestonesResponse, error)
}

type milestoneServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMilestoneServiceClient(cc grpc.ClientConnInterface) MilestoneServiceClient {
	return &milestoneServiceClient{cc}
}

func (c *milestoneServiceClient) GetMilestoneById(ctx context.Context, in *GetMilestoneByIdRequest, opts ...grpc.CallOption) (*Milestone, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Milestone)
	err := c.cc.Invoke(ctx, MilestoneService_GetMilestoneById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milestoneServiceClient) DeleteMilestone(ctx context.Context, in *DeleteMilestoneRequest, opts ...grpc.CallOption) (*DeleteMilestoneResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteMilestoneResponse)
	err := c.cc.Invoke(ctx, MilestoneService_DeleteMilestone_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milestoneServiceClient) GetAllMilestones(ctx context.Context, in *GetAllMilestonesRequest, opts ...grpc.CallOption) (*GetAllMilestonesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllMilestonesResponse)
	err := c.cc.Invoke(ctx, MilestoneService_GetAllMilestones_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MilestoneServiceServer is the server API for MilestoneService service.
// All implementations must embed UnimplementedMilestoneServiceServer
// for forward compatibility
type MilestoneServiceServer interface {
	GetMilestoneById(context.Context, *GetMilestoneByIdRequest) (*Milestone, error)
	DeleteMilestone(context.Context, *DeleteMilestoneRequest) (*DeleteMilestoneResponse, error)
	GetAllMilestones(context.Context, *GetAllMilestonesRequest) (*GetAllMilestonesResponse, error)
	mustEmbedUnimplementedMilestoneServiceServer()
}

// UnimplementedMilestoneServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMilestoneServiceServer struct {
}

func (UnimplementedMilestoneServiceServer) GetMilestoneById(context.Context, *GetMilestoneByIdRequest) (*Milestone, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMilestoneById not implemented")
}
func (UnimplementedMilestoneServiceServer) DeleteMilestone(context.Context, *DeleteMilestoneRequest) (*DeleteMilestoneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMilestone not implemented")
}
func (UnimplementedMilestoneServiceServer) GetAllMilestones(context.Context, *GetAllMilestonesRequest) (*GetAllMilestonesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllMilestones not implemented")
}
func (UnimplementedMilestoneServiceServer) mustEmbedUnimplementedMilestoneServiceServer() {}

// UnsafeMilestoneServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MilestoneServiceServer will
// result in compilation errors.
type UnsafeMilestoneServiceServer interface {
	mustEmbedUnimplementedMilestoneServiceServer()
}

func RegisterMilestoneServiceServer(s grpc.ServiceRegistrar, srv MilestoneServiceServer) {
	s.RegisterService(&MilestoneService_ServiceDesc, srv)
}

func _MilestoneService_GetMilestoneById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMilestoneByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilestoneServiceServer).GetMilestoneById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MilestoneService_GetMilestoneById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilestoneServiceServer).GetMilestoneById(ctx, req.(*GetMilestoneByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilestoneService_DeleteMilestone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMilestoneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilestoneServiceServer).DeleteMilestone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MilestoneService_DeleteMilestone_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilestoneServiceServer).DeleteMilestone(ctx, req.(*DeleteMilestoneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilestoneService_GetAllMilestones_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllMilestonesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilestoneServiceServer).GetAllMilestones(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MilestoneService_GetAllMilestones_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilestoneServiceServer).GetAllMilestones(ctx, req.(*GetAllMilestonesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MilestoneService_ServiceDesc is the grpc.ServiceDesc for MilestoneService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MilestoneService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "timeline.MilestoneService",
	HandlerType: (*MilestoneServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMilestoneById",
			Handler:    _MilestoneService_GetMilestoneById_Handler,
		},
		{
			MethodName: "DeleteMilestone",
			Handler:    _MilestoneService_DeleteMilestone_Handler,
		},
		{
			MethodName: "GetAllMilestones",
			Handler:    _MilestoneService_GetAllMilestones_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "submodule-for-timecapsule/timeline_service/milestone.proto",
}
