// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.1
// source: submodule-for-timecapsule/timeline_service/custom_event.proto

package timeline

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	CustomEventService_GetCustomEventById_FullMethodName = "/timeline.CustomEventService/GetCustomEventById"
	CustomEventService_DeleteCustomEvent_FullMethodName  = "/timeline.CustomEventService/DeleteCustomEvent"
	CustomEventService_GetAllCustomEvents_FullMethodName = "/timeline.CustomEventService/GetAllCustomEvents"
)

// CustomEventServiceClient is the client API for CustomEventService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CustomEventServiceClient interface {
	GetCustomEventById(ctx context.Context, in *GetCustomEventByIdRequest, opts ...grpc.CallOption) (*CustomEvent, error)
	DeleteCustomEvent(ctx context.Context, in *DeleteCustomEventRequest, opts ...grpc.CallOption) (*DeleteCustomEventResponse, error)
	GetAllCustomEvents(ctx context.Context, in *GetAllCustomEventsRequest, opts ...grpc.CallOption) (*GetAllCustomEventsResponse, error)
}

type customEventServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCustomEventServiceClient(cc grpc.ClientConnInterface) CustomEventServiceClient {
	return &customEventServiceClient{cc}
}

func (c *customEventServiceClient) GetCustomEventById(ctx context.Context, in *GetCustomEventByIdRequest, opts ...grpc.CallOption) (*CustomEvent, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CustomEvent)
	err := c.cc.Invoke(ctx, CustomEventService_GetCustomEventById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customEventServiceClient) DeleteCustomEvent(ctx context.Context, in *DeleteCustomEventRequest, opts ...grpc.CallOption) (*DeleteCustomEventResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteCustomEventResponse)
	err := c.cc.Invoke(ctx, CustomEventService_DeleteCustomEvent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customEventServiceClient) GetAllCustomEvents(ctx context.Context, in *GetAllCustomEventsRequest, opts ...grpc.CallOption) (*GetAllCustomEventsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllCustomEventsResponse)
	err := c.cc.Invoke(ctx, CustomEventService_GetAllCustomEvents_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CustomEventServiceServer is the server API for CustomEventService service.
// All implementations must embed UnimplementedCustomEventServiceServer
// for forward compatibility
type CustomEventServiceServer interface {
	GetCustomEventById(context.Context, *GetCustomEventByIdRequest) (*CustomEvent, error)
	DeleteCustomEvent(context.Context, *DeleteCustomEventRequest) (*DeleteCustomEventResponse, error)
	GetAllCustomEvents(context.Context, *GetAllCustomEventsRequest) (*GetAllCustomEventsResponse, error)
	mustEmbedUnimplementedCustomEventServiceServer()
}

// UnimplementedCustomEventServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCustomEventServiceServer struct {
}

func (UnimplementedCustomEventServiceServer) GetCustomEventById(context.Context, *GetCustomEventByIdRequest) (*CustomEvent, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCustomEventById not implemented")
}
func (UnimplementedCustomEventServiceServer) DeleteCustomEvent(context.Context, *DeleteCustomEventRequest) (*DeleteCustomEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCustomEvent not implemented")
}
func (UnimplementedCustomEventServiceServer) GetAllCustomEvents(context.Context, *GetAllCustomEventsRequest) (*GetAllCustomEventsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllCustomEvents not implemented")
}
func (UnimplementedCustomEventServiceServer) mustEmbedUnimplementedCustomEventServiceServer() {}

// UnsafeCustomEventServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CustomEventServiceServer will
// result in compilation errors.
type UnsafeCustomEventServiceServer interface {
	mustEmbedUnimplementedCustomEventServiceServer()
}

func RegisterCustomEventServiceServer(s grpc.ServiceRegistrar, srv CustomEventServiceServer) {
	s.RegisterService(&CustomEventService_ServiceDesc, srv)
}

func _CustomEventService_GetCustomEventById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCustomEventByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomEventServiceServer).GetCustomEventById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CustomEventService_GetCustomEventById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomEventServiceServer).GetCustomEventById(ctx, req.(*GetCustomEventByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomEventService_DeleteCustomEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCustomEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomEventServiceServer).DeleteCustomEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CustomEventService_DeleteCustomEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomEventServiceServer).DeleteCustomEvent(ctx, req.(*DeleteCustomEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomEventService_GetAllCustomEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllCustomEventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomEventServiceServer).GetAllCustomEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CustomEventService_GetAllCustomEvents_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomEventServiceServer).GetAllCustomEvents(ctx, req.(*GetAllCustomEventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CustomEventService_ServiceDesc is the grpc.ServiceDesc for CustomEventService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CustomEventService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "timeline.CustomEventService",
	HandlerType: (*CustomEventServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCustomEventById",
			Handler:    _CustomEventService_GetCustomEventById_Handler,
		},
		{
			MethodName: "DeleteCustomEvent",
			Handler:    _CustomEventService_DeleteCustomEvent_Handler,
		},
		{
			MethodName: "GetAllCustomEvents",
			Handler:    _CustomEventService_GetAllCustomEvents_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "submodule-for-timecapsule/timeline_service/custom_event.proto",
}
