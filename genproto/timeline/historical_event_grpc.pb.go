// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.1
// source: submodule-for-timecapsule/timeline_service/historical_event.proto

package timeline

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	HistoricalEventService_GetHistoricalEventById_FullMethodName = "/timeline.HistoricalEventService/GetHistoricalEventById"
	HistoricalEventService_DeleteHistoricalEvent_FullMethodName  = "/timeline.HistoricalEventService/DeleteHistoricalEvent"
	HistoricalEventService_GetAllHistoricalEvents_FullMethodName = "/timeline.HistoricalEventService/GetAllHistoricalEvents"
)

// HistoricalEventServiceClient is the client API for HistoricalEventService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HistoricalEventServiceClient interface {
	GetHistoricalEventById(ctx context.Context, in *GetHistoricalEventByIdRequest, opts ...grpc.CallOption) (*HistoricalEvent, error)
	DeleteHistoricalEvent(ctx context.Context, in *DeleteHistoricalEventRequest, opts ...grpc.CallOption) (*DeleteHistoricalEventResponse, error)
	GetAllHistoricalEvents(ctx context.Context, in *GetAllHistoricalEventsRequest, opts ...grpc.CallOption) (*GetAllHistoricalEventsResponse, error)
}

type historicalEventServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHistoricalEventServiceClient(cc grpc.ClientConnInterface) HistoricalEventServiceClient {
	return &historicalEventServiceClient{cc}
}

func (c *historicalEventServiceClient) GetHistoricalEventById(ctx context.Context, in *GetHistoricalEventByIdRequest, opts ...grpc.CallOption) (*HistoricalEvent, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HistoricalEvent)
	err := c.cc.Invoke(ctx, HistoricalEventService_GetHistoricalEventById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *historicalEventServiceClient) DeleteHistoricalEvent(ctx context.Context, in *DeleteHistoricalEventRequest, opts ...grpc.CallOption) (*DeleteHistoricalEventResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteHistoricalEventResponse)
	err := c.cc.Invoke(ctx, HistoricalEventService_DeleteHistoricalEvent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *historicalEventServiceClient) GetAllHistoricalEvents(ctx context.Context, in *GetAllHistoricalEventsRequest, opts ...grpc.CallOption) (*GetAllHistoricalEventsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllHistoricalEventsResponse)
	err := c.cc.Invoke(ctx, HistoricalEventService_GetAllHistoricalEvents_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HistoricalEventServiceServer is the server API for HistoricalEventService service.
// All implementations must embed UnimplementedHistoricalEventServiceServer
// for forward compatibility
type HistoricalEventServiceServer interface {
	GetHistoricalEventById(context.Context, *GetHistoricalEventByIdRequest) (*HistoricalEvent, error)
	DeleteHistoricalEvent(context.Context, *DeleteHistoricalEventRequest) (*DeleteHistoricalEventResponse, error)
	GetAllHistoricalEvents(context.Context, *GetAllHistoricalEventsRequest) (*GetAllHistoricalEventsResponse, error)
	mustEmbedUnimplementedHistoricalEventServiceServer()
}

// UnimplementedHistoricalEventServiceServer must be embedded to have forward compatible implementations.
type UnimplementedHistoricalEventServiceServer struct {
}

func (UnimplementedHistoricalEventServiceServer) GetHistoricalEventById(context.Context, *GetHistoricalEventByIdRequest) (*HistoricalEvent, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHistoricalEventById not implemented")
}
func (UnimplementedHistoricalEventServiceServer) DeleteHistoricalEvent(context.Context, *DeleteHistoricalEventRequest) (*DeleteHistoricalEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteHistoricalEvent not implemented")
}
func (UnimplementedHistoricalEventServiceServer) GetAllHistoricalEvents(context.Context, *GetAllHistoricalEventsRequest) (*GetAllHistoricalEventsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllHistoricalEvents not implemented")
}
func (UnimplementedHistoricalEventServiceServer) mustEmbedUnimplementedHistoricalEventServiceServer() {
}

// UnsafeHistoricalEventServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HistoricalEventServiceServer will
// result in compilation errors.
type UnsafeHistoricalEventServiceServer interface {
	mustEmbedUnimplementedHistoricalEventServiceServer()
}

func RegisterHistoricalEventServiceServer(s grpc.ServiceRegistrar, srv HistoricalEventServiceServer) {
	s.RegisterService(&HistoricalEventService_ServiceDesc, srv)
}

func _HistoricalEventService_GetHistoricalEventById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHistoricalEventByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HistoricalEventServiceServer).GetHistoricalEventById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HistoricalEventService_GetHistoricalEventById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HistoricalEventServiceServer).GetHistoricalEventById(ctx, req.(*GetHistoricalEventByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HistoricalEventService_DeleteHistoricalEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteHistoricalEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HistoricalEventServiceServer).DeleteHistoricalEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HistoricalEventService_DeleteHistoricalEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HistoricalEventServiceServer).DeleteHistoricalEvent(ctx, req.(*DeleteHistoricalEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HistoricalEventService_GetAllHistoricalEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllHistoricalEventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HistoricalEventServiceServer).GetAllHistoricalEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HistoricalEventService_GetAllHistoricalEvents_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HistoricalEventServiceServer).GetAllHistoricalEvents(ctx, req.(*GetAllHistoricalEventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// HistoricalEventService_ServiceDesc is the grpc.ServiceDesc for HistoricalEventService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HistoricalEventService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "timeline.HistoricalEventService",
	HandlerType: (*HistoricalEventServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetHistoricalEventById",
			Handler:    _HistoricalEventService_GetHistoricalEventById_Handler,
		},
		{
			MethodName: "DeleteHistoricalEvent",
			Handler:    _HistoricalEventService_DeleteHistoricalEvent_Handler,
		},
		{
			MethodName: "GetAllHistoricalEvents",
			Handler:    _HistoricalEventService_GetAllHistoricalEvents_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "submodule-for-timecapsule/timeline_service/historical_event.proto",
}
